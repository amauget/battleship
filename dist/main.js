(()=>{var e={208:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var n=r(354),o=r.n(n),i=r(314),s=r.n(i)()(o());s.push([e.id,":root{\n  margin:0;\n  padding:0;\n}\n\n.playerBoard, .opponentBoard{\n  display: grid;\n  grid-template-rows:repeat(10, fit-content);\n  justify-content: center;\n}\n#row{\n  display: grid;\n  grid-template-columns: repeat(10, auto);\n  gap:0\n}\n/*row is id */\n.nine{ grid-row: 1;} .eight{grid-row: 2;}\n.seven{grid-row: 3;} .six{grid-row: 4;} .five{grid-row: 5;}\n.four{grid-row: 6;} .three{grid-row: 7;} .two{grid-row: 8;}\n.one{grid-row: 9;} .zero{grid-row: 10;}\n\n.cell{\n  border:solid .5px black;\n  height: 2.5rem;\n  width: 2.5rem;\n  justify-self: center;\n\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,QAAQ;EACR,SAAS;AACX;;AAEA;EACE,aAAa;EACb,0CAA0C;EAC1C,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,uCAAuC;EACvC;AACF;AACA,aAAa;AACb,OAAO,WAAW,CAAC,EAAE,OAAO,WAAW,CAAC;AACxC,OAAO,WAAW,CAAC,EAAE,KAAK,WAAW,CAAC,EAAE,MAAM,WAAW,CAAC;AAC1D,MAAM,WAAW,CAAC,EAAE,OAAO,WAAW,CAAC,EAAE,KAAK,WAAW,CAAC;AAC1D,KAAK,WAAW,CAAC,EAAE,MAAM,YAAY,CAAC;;AAEtC;EACE,uBAAuB;EACvB,cAAc;EACd,aAAa;EACb,oBAAoB;;AAEtB",sourcesContent:[":root{\n  margin:0;\n  padding:0;\n}\n\n.playerBoard, .opponentBoard{\n  display: grid;\n  grid-template-rows:repeat(10, fit-content);\n  justify-content: center;\n}\n#row{\n  display: grid;\n  grid-template-columns: repeat(10, auto);\n  gap:0\n}\n/*row is id */\n.nine{ grid-row: 1;} .eight{grid-row: 2;}\n.seven{grid-row: 3;} .six{grid-row: 4;} .five{grid-row: 5;}\n.four{grid-row: 6;} .three{grid-row: 7;} .two{grid-row: 8;}\n.one{grid-row: 9;} .zero{grid-row: 10;}\n\n.cell{\n  border:solid .5px black;\n  height: 2.5rem;\n  width: 2.5rem;\n  justify-self: center;\n\n}"],sourceRoot:""}]);const a=s},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<e.length;u++){var d=[].concat(e[u]);n&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{"use strict";var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],u=n.base?c[0]+n.base:c[0],d=i[u]||0,l="".concat(u," ").concat(d);i[u]=d+1;var A=r(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var h=o(p,n);n.byIndex=a,t.splice(a,0,{identifier:l,updater:h,references:1})}s.push(l)}return s}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=r(i[s]);t[a].references--}for(var c=n(e,o),u=0;u<i.length;u++){var d=r(i[u]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},659:e=>{"use strict";var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,r)=>{"use strict";e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},380:e=>{e.exports=function(e){let t=["zero","one","two","three","four","five","six","seven","eight","nine"];for(let r=0;r<10;r++){let n=document.createElement("div");n.className=t[r],n.id="row";for(let e=0;e<10;e++){let t=document.createElement("div");t.id=`${e},${r}`,t.className="cell",n.appendChild(t),t.textContent=`[${t.id}]`}e.appendChild(n)}return e}},918:(e,t,r)=>{const n=r(52).Ship;class o{constructor(e,t,r,o,i){this.board=this.createGraph(),this.sinkCount=0,this.carrier=new n(5,"carrier"),this.battleship=new n(4,"battleship"),this.cruiser=new n(3,"cruiser"),this.sub=new n(3,"submarine"),this.destroyer=new n(2,"destroyer")}createGraph(){this.board={};for(let e=0;e<10;e++)for(let t=0;t<10;t++){let r=[t,e].toString(),n=this.validRange(t,e);this.board[r]={coordinates:[t,e],up:n[0],down:n[1],left:n[2],right:n[3],occupied:null,selected:!1}}return this.board}validRange(e,t){let r=[e,t+1],n=[e,t-1],o=[e-1,t],i=[e+1,t];t>8?r=null:t<1&&(n=null),e>8?i=null:e<1&&(o=null);let s=[];return s.push(r,n,o,i),s}receiveAttack(e){if(!1===this.board[e].selected){if(this.changeSelected(this.board[e]),null!==this.board[e].occupied){let t=this.board[e].occupied;return t.hit(),console.log(t),"hit"}return"miss"}return!1}changeSelected(e){return e.selected=!0}setShip(e,t,r="x"){let n=t.toString();const o=this.board[n].coordinates;let i=[];if("x"===r){if(o[0]+e.length-1>9)return null;for(let t=0;t<e.length;t++)this.board[n].occupied=e,i.push(this.board[n].coordinates),n=this.board[n].right;return i}if(o[1]+e.length-1>9)return null;for(let t=0;t<e.length;t++)this.board[n].occupied=e,i.push(this.board[n].coordinates),n=this.board[n].up;return i}}let i=new o;i.createGraph(),i.setShip(i.destroyer,[0,0],"x"),i.receiveAttack("0,0"),i.receiveAttack("1,0");let s=new o;s.createGraph(),s.board["5,5"].occupied="destroyer",e.exports={GameBoard:o,player1:s}},52:e=>{class t{constructor(e,t){this.length=e,this.name=t,this.hits=0,this.sunk=!1}hit(){return this.hits+=1,this.hits===this.length&&this.isSunk(),this.hits}isSunk(){if(this.length===this.hits)return this.sunk=!0}}let r=new t(5);r.hits=5;let n=new t(3).hit();e.exports={Ship:t,sunkShip:r,notSunkShip:n}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{"use strict";var e=r(72),t=r.n(e),n=r(825),o=r.n(n),i=r(659),s=r.n(i),a=r(56),c=r.n(a),u=r(540),d=r.n(u),l=r(113),A=r.n(l),p=r(208),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),t()(p.A,h),p.A&&p.A.locals&&p.A.locals;const f=r(380),g=r(918).GameBoard;console.trace(),function(){let e=document.querySelector(".playerBoard");f(e),function(e){let t=new g;e.addEventListener("click",(e=>{let r=e.target;if("cell"===r.className){let e=r.id;console.log(t.receiveAttack(e)),console.log(t.board[e])}}))}(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUdsQyxHQUVKLENBbEJFd0QsQ0FBT0gsRUFDVCxDQXFCQUksRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvRE9NLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanNJbXBvcnRzL2dhbWVCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzSW1wb3J0cy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdHtcbiAgbWFyZ2luOjA7XG4gIHBhZGRpbmc6MDtcbn1cblxuLnBsYXllckJvYXJkLCAub3Bwb25lbnRCb2FyZHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCgxMCwgZml0LWNvbnRlbnQpO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cbiNyb3d7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCBhdXRvKTtcbiAgZ2FwOjBcbn1cbi8qcm93IGlzIGlkICovXG4ubmluZXsgZ3JpZC1yb3c6IDE7fSAuZWlnaHR7Z3JpZC1yb3c6IDI7fVxuLnNldmVue2dyaWQtcm93OiAzO30gLnNpeHtncmlkLXJvdzogNDt9IC5maXZle2dyaWQtcm93OiA1O31cbi5mb3Vye2dyaWQtcm93OiA2O30gLnRocmVle2dyaWQtcm93OiA3O30gLnR3b3tncmlkLXJvdzogODt9XG4ub25le2dyaWQtcm93OiA5O30gLnplcm97Z3JpZC1yb3c6IDEwO31cblxuLmNlbGx7XG4gIGJvcmRlcjpzb2xpZCAuNXB4IGJsYWNrO1xuICBoZWlnaHQ6IDIuNXJlbTtcbiAgd2lkdGg6IDIuNXJlbTtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG5cbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxRQUFRO0VBQ1IsU0FBUztBQUNYOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDBDQUEwQztFQUMxQyx1QkFBdUI7QUFDekI7QUFDQTtFQUNFLGFBQWE7RUFDYix1Q0FBdUM7RUFDdkM7QUFDRjtBQUNBLGFBQWE7QUFDYixPQUFPLFdBQVcsQ0FBQyxFQUFFLE9BQU8sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sV0FBVyxDQUFDLEVBQUUsS0FBSyxXQUFXLENBQUMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxRCxNQUFNLFdBQVcsQ0FBQyxFQUFFLE9BQU8sV0FBVyxDQUFDLEVBQUUsS0FBSyxXQUFXLENBQUM7QUFDMUQsS0FBSyxXQUFXLENBQUMsRUFBRSxNQUFNLFlBQVksQ0FBQzs7QUFFdEM7RUFDRSx1QkFBdUI7RUFDdkIsY0FBYztFQUNkLGFBQWE7RUFDYixvQkFBb0I7O0FBRXRCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290e1xcbiAgbWFyZ2luOjA7XFxuICBwYWRkaW5nOjA7XFxufVxcblxcbi5wbGF5ZXJCb2FyZCwgLm9wcG9uZW50Qm9hcmR7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCgxMCwgZml0LWNvbnRlbnQpO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbiNyb3d7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIGF1dG8pO1xcbiAgZ2FwOjBcXG59XFxuLypyb3cgaXMgaWQgKi9cXG4ubmluZXsgZ3JpZC1yb3c6IDE7fSAuZWlnaHR7Z3JpZC1yb3c6IDI7fVxcbi5zZXZlbntncmlkLXJvdzogMzt9IC5zaXh7Z3JpZC1yb3c6IDQ7fSAuZml2ZXtncmlkLXJvdzogNTt9XFxuLmZvdXJ7Z3JpZC1yb3c6IDY7fSAudGhyZWV7Z3JpZC1yb3c6IDc7fSAudHdve2dyaWQtcm93OiA4O31cXG4ub25le2dyaWQtcm93OiA5O30gLnplcm97Z3JpZC1yb3c6IDEwO31cXG5cXG4uY2VsbHtcXG4gIGJvcmRlcjpzb2xpZCAuNXB4IGJsYWNrO1xcbiAgaGVpZ2h0OiAyLjVyZW07XFxuICB3aWR0aDogMi41cmVtO1xcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxuXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJmdW5jdGlvbiBjcmVhdGVCb2FyZChkaXYpe1xuICBsZXQgY2xhc3NBcnJheSA9IFsnemVybycsICdvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInLCAnZml2ZScsICdzaXgnLCAnc2V2ZW4nLCAnZWlnaHQnLCAnbmluZSddXG4gIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICBsZXQgcm93RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgcm93RWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc0FycmF5W3Jvd11cbiAgICByb3dFbGVtZW50LmlkID0gJ3JvdydcbiAgICBcbiAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICBsZXQgY29sRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBjb2xFbGVtZW50LmlkID0gYCR7Y29sfSwke3Jvd31gXG4gICAgICBjb2xFbGVtZW50LmNsYXNzTmFtZSA9ICdjZWxsJyBcbiAgICAgIHJvd0VsZW1lbnQuYXBwZW5kQ2hpbGQoY29sRWxlbWVudClcbiAgICAgIGNvbEVsZW1lbnQudGV4dENvbnRlbnQgPSBgWyR7Y29sRWxlbWVudC5pZH1dYCAgICAgIFxuICAgIH1cbiAgICBkaXYuYXBwZW5kQ2hpbGQocm93RWxlbWVudClcbiAgfVxuICByZXR1cm4gZGl2XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCb2FyZCIsImNvbnN0IFNoaXBPYmpzID0gcmVxdWlyZSgnLi9zaGlwJylcbmNvbnN0IFNoaXAgPSBTaGlwT2Jqcy5TaGlwXG5cbmNsYXNzIEdhbWVCb2FyZHtcbiAgY29uc3RydWN0b3IoY2FycmllciwgYmF0dGxlc2hpcCwgY3J1aXNlciwgc3ViLCBkZXN0cm95ZXIpeyAvKiBzaGlwIG9iaiByZXF1aXJlcyBsZW5ndGggYW5kIG5hbWUgZGV0ZXJtaW5lZC4gKi9cbiAgICB0aGlzLmJvYXJkID0gdGhpcy5jcmVhdGVHcmFwaCgpXG4gICAgdGhpcy5zaW5rQ291bnQgPSAwIC8qIFRoaXMgY291bGQgYmUgdXNlZCB0byB0cmFjayB3aW5uZXIvbG9zZXIuIEJ1dCBkb2VzIGl0IGJlbG9uZyBoZXJlLCBvciB1bmRlciBwbGF5ZXIgY2xhc3M/ICovXG4gICAgdGhpcy5jYXJyaWVyID0gbmV3IFNoaXAoNSwgJ2NhcnJpZXInKVxuICAgIHRoaXMuYmF0dGxlc2hpcCA9IG5ldyBTaGlwKDQsICdiYXR0bGVzaGlwJylcbiAgICB0aGlzLmNydWlzZXIgPSBuZXcgU2hpcCgzLCAnY3J1aXNlcicpXG4gICAgdGhpcy5zdWIgPSBuZXcgU2hpcCgzLCAnc3VibWFyaW5lJylcbiAgICB0aGlzLmRlc3Ryb3llciA9IG5ldyBTaGlwKDIsICdkZXN0cm95ZXInKVxuXG4gIH1cbiAgY3JlYXRlR3JhcGgoKXtcbiAgICB0aGlzLmJvYXJkID0ge31cbiAgICBmb3IobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3crKyl7XG4gICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgIGxldCBrZXkgPSBbY29sLCByb3ddLnRvU3RyaW5nKClcbiAgICAgICAgbGV0IG1vdmVzID0gdGhpcy52YWxpZFJhbmdlKGNvbCwgcm93KVxuICAgICAgICBcbiAgICAgICAgdGhpcy5ib2FyZFtrZXldID0ge1xuICAgICAgICAgIGNvb3JkaW5hdGVzOiBbY29sLCByb3ddLCBcbiAgICAgICAgICB1cDogbW92ZXNbMF0sIFxuICAgICAgICAgIGRvd246IG1vdmVzWzFdLCBcbiAgICAgICAgICBsZWZ0OiBtb3Zlc1syXSwgXG4gICAgICAgICAgcmlnaHQ6IG1vdmVzWzNdLCBcbiAgICAgICAgICBvY2N1cGllZDogbnVsbCwgXG4gICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgLyoga2V5IGlzIHN0cmluZyBvZiBjb29yZGluYXRlcywgb2JqIGluY2x1ZGVzIGNvb3JkaW5hdGVzIGFuZCBzdXJyb3VuZGluZyBwb3NpdGlvbnMsIGluY2x1ZGluZyBudWxsLiBcbiAgICAgICAgT2NjdXBpZWQgc3RhdHVzIGRlZmF1bHQgdmFsdWUgb2YgZmFsc2UuIFNlbGVjdGVkIG9mIHRydWUgY2FuJ3QgYmUgc2VsZWN0ZWQgYWdhaW4gKi9cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYm9hcmRcbiAgfVxuICB2YWxpZFJhbmdlKGNvbCwgcm93KXtcbiAgICBsZXQgdXAgPSBbY29sLCByb3cgKyAxXVxuICAgIGxldCBkb3duID0gW2NvbCwgcm93IC0xIF1cbiAgICBsZXQgbGVmdCA9IFtjb2wgLTEsIHJvd10gXG4gICAgbGV0IHJpZ2h0ID0gW2NvbCArIDEsIHJvd11cbiAgICBpZihyb3cgPiA4KXtcbiAgICAgIHVwID0gbnVsbFxuICAgIH1cbiAgICBlbHNlIGlmKHJvdyA8IDEpe1xuICAgICAgZG93biA9IG51bGxcbiAgICB9XG4gICAgaWYoY29sID4gOCl7XG4gICAgICByaWdodCA9IG51bGxcbiAgICB9XG4gICAgZWxzZSBpZihjb2wgPCAxKXsgLyogYnVnIGluIGxlZnQgcmlnaHQgZGV0ZXJtaW5hdGlvbiAqL1xuICAgICAgbGVmdCA9IG51bGxcbiAgICB9XG4gICAgbGV0IGFycmF5ID0gW11cbiAgICBhcnJheS5wdXNoKHVwLGRvd24sbGVmdCxyaWdodClcbiAgICByZXR1cm4gYXJyYXlcbiAgfVxuIFxuICByZWNlaXZlQXR0YWNrKGtleSl7XG4gICAgaWYodGhpcy5ib2FyZFtrZXldLnNlbGVjdGVkID09PSBmYWxzZSl7XG4gICAgICB0aGlzLmNoYW5nZVNlbGVjdGVkKHRoaXMuYm9hcmRba2V5XSlcblxuICAgICAgaWYodGhpcy5ib2FyZFtrZXldLm9jY3VwaWVkICE9PSBudWxsKXsgLyogc2hpcCBjbGFzcyBpdGVtIGlzIHN0b3JlZCBpbiBcInRoaXMuYm9hcmRbY29vcl0ub2NjdXBpZWRcIiBtYWtpbmcgLmhpdCgpIGNhbGxhYmxlIHdoZW4gc3F1YXJlIGlzIGF0dGFja2VkLiAqL1xuICAgICAgICBsZXQgc2hpcCA9IHRoaXMuYm9hcmRba2V5XS5vY2N1cGllZFxuICAgICAgICBzaGlwLmhpdCgpXG4gICAgICAgIGNvbnNvbGUubG9nKHNoaXApXG4gICAgICAgIHJldHVybiAnaGl0J1xuICAgICAgfVxuICAgICAgcmV0dXJuICdtaXNzJ1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgcmV0dXJuIGZhbHNlIC8qIHJldHVybiB2YWx1ZSBpcyBkZWZlcnJpbmcgdG8gYm9vbCBmb3Igd2hldGhlciB0dXJuIHNob3VsZCBjaGFuZ2UgKi9cbiAgICB9XG4gIH1cbiAgY2hhbmdlU2VsZWN0ZWQoaXRlbSl7XG4gICAgcmV0dXJuIGl0ZW0uc2VsZWN0ZWQgPSB0cnVlXG4gIH1cbiAgc2V0U2hpcChzaGlwICxjb29yZGluYXRlcywgb3JpZW50YXRpb24gPSAneCcpe1xuICAgIGxldCBrZXkgPSBjb29yZGluYXRlcy50b1N0cmluZygpXG4gICAgY29uc3Qgb3JpZ2luID0gdGhpcy5ib2FyZFtrZXldLmNvb3JkaW5hdGVzXG5cbiAgICBsZXQgY29vcmRpbmF0ZUFycmF5ID0gW11cblxuICAgIGlmKG9yaWVudGF0aW9uID09PSAneCcpe1xuICAgICAgaWYoKG9yaWdpblswXSArIHNoaXAubGVuZ3RoIC0gMSkgPiA5KXtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIC8qIHJldHJpZXZlIGFsbCBhZmZlY3RlZCBjb29yZGluYXRlcywgY2hhbmdlIC5vY2N1cGllZCBmcm9tIG51bGwgdG8gc2hpcCAqL1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgdGhpcy5ib2FyZFtrZXldLm9jY3VwaWVkID0gc2hpcCAvKiBhbGxvd3Mgc2hpcCB0byBiZSByZWZlcmVuY2VkIGxhdGVyIHdoZW4gc3F1YXJlIGhhcyBhbiBpbnRlcmFjdGlvbiAqL1xuICAgICAgICAgIGNvb3JkaW5hdGVBcnJheS5wdXNoKHRoaXMuYm9hcmRba2V5XS5jb29yZGluYXRlcylcbiAgICAgICAgICBrZXkgPSB0aGlzLmJvYXJkW2tleV0ucmlnaHRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZUFycmF5XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBpZigob3JpZ2luWzFdICsgc2hpcC5sZW5ndGggLSAxKSA+IDkpe1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgLyogcmV0cmlldmUgYWxsIGFmZmVjdGVkIGNvb3JkaW5hdGVzLCBjaGFuZ2UgLm9jY3VwaWVkIGZyb20gbnVsbCB0byBzaGlwICovXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICB0aGlzLmJvYXJkW2tleV0ub2NjdXBpZWQgPSBzaGlwIC8qIGFsbG93cyBzaGlwIHRvIGJlIHJlZmVyZW5jZWQgbGF0ZXIgd2hlbiBzcXVhcmUgaGFzIGFuIGludGVyYWN0aW9uICovXG4gICAgICAgICAgY29vcmRpbmF0ZUFycmF5LnB1c2godGhpcy5ib2FyZFtrZXldLmNvb3JkaW5hdGVzKVxuICAgICAgICAgIGtleSA9IHRoaXMuYm9hcmRba2V5XS51cFxuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb29yZGluYXRlQXJyYXlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5sZXQgdGVzdCA9IG5ldyBHYW1lQm9hcmQoKVxudGVzdC5jcmVhdGVHcmFwaCgpXG50ZXN0LnNldFNoaXAodGVzdC5kZXN0cm95ZXIsIFswLDBdLCAneCcpXG5cbnRlc3QucmVjZWl2ZUF0dGFjaygnMCwwJylcbnRlc3QucmVjZWl2ZUF0dGFjaygnMSwwJylcblxuLyogTW9jayBPYmogKi9cbmxldCBwbGF5ZXIxID0gbmV3IEdhbWVCb2FyZCgpXG5wbGF5ZXIxLmNyZWF0ZUdyYXBoKClcbnBsYXllcjEuYm9hcmRbJzUsNSddLm9jY3VwaWVkID0gJ2Rlc3Ryb3llcidcblxubW9kdWxlLmV4cG9ydHMgPXtcbiAgR2FtZUJvYXJkLFxuICBwbGF5ZXIxXG59IiwiY2xhc3MgU2hpcHtcbiAgY29uc3RydWN0b3IobGVuZ3RoLCBuYW1lKXtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aFxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLmhpdHMgPSAwXG4gICAgdGhpcy5zdW5rID0gZmFsc2VcbiAgfVxuICBoaXQoKXsgLyogYSBoaXQgd2lsbCBiZSBkZXRlcm1pbmVkIGluIGJvYXJkIG9iaiAqL1xuICAgIHRoaXMuaGl0cyArPSAxXG4gICAgaWYodGhpcy5oaXRzID09PSB0aGlzLmxlbmd0aCl7XG4gICAgICB0aGlzLmlzU3VuaygpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhpdHNcbiAgfVxuICBpc1N1bmsoKXtcbiAgICBpZih0aGlzLmxlbmd0aCA9PT0gdGhpcy5oaXRzKXtcbiAgICAgIHJldHVybiB0aGlzLnN1bmsgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbmxldCBzdW5rU2hpcCA9IG5ldyBTaGlwKDUpXG5zdW5rU2hpcC5oaXRzID0gNVxuXG5sZXQgbm90U3Vua1NoaXAgPSBuZXcgU2hpcCgzKS5oaXQoKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2hpcCxcbiAgc3Vua1NoaXAsXG4gIG5vdFN1bmtTaGlwIFxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjb25zdCBjcmVhdGVCb2FyZCA9IHJlcXVpcmUoJy4vRE9NJylcbmNvbnN0IGJvYXJkT2JqID0gcmVxdWlyZSgnLi9qc0ltcG9ydHMvZ2FtZUJvYXJkJylcbmNvbnN0IEdhbWVCb2FyZCA9IGJvYXJkT2JqLkdhbWVCb2FyZFxuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5cbmZ1bmN0aW9uIGluaXQoKXtcblxuICBsZXQgcGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXllckJvYXJkJylcbiAgY3JlYXRlQm9hcmQocGxheWVyKVxuICBcbiAgLy8gbGV0IG9wcG9uZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9wcG9uZW50Qm9hcmQnKVxuICAvLyBjcmVhdGVCb2FyZChvcHBvbmVudClcblxuICBldmVudHMocGxheWVyKVxufVxuXG5cbmZ1bmN0aW9uIGV2ZW50cyhwbGF5ZXIpe1xuICBsZXQgcGxheWVyMSA9IG5ldyBHYW1lQm9hcmQoKVxuICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+e1xuXG4gICAgbGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldFxuICAgIHN3aXRjaCh0YXJnZXQuY2xhc3NOYW1lKXtcbiAgICAgIGNhc2UoJ2NlbGwnKTpcbiAgICAgICAgbGV0IGtleSA9IHRhcmdldC5pZFxuICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXIxLnJlY2VpdmVBdHRhY2soa2V5KSlcbiAgICAgICAgY29uc29sZS5sb2cocGxheWVyMS5ib2FyZFtrZXldKVxuXG4gICAgICBcbiAgICB9XG4gIH0pXG59XG5cbmNvbnNvbGUudHJhY2UoKVxuXG5pbml0KCkiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJkaXYiLCJjbGFzc0FycmF5Iiwicm93Iiwicm93RWxlbWVudCIsImNsYXNzTmFtZSIsImNvbCIsImNvbEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsIlNoaXAiLCJHYW1lQm9hcmQiLCJjb25zdHJ1Y3RvciIsImNhcnJpZXIiLCJiYXR0bGVzaGlwIiwiY3J1aXNlciIsInN1YiIsImRlc3Ryb3llciIsImJvYXJkIiwiY3JlYXRlR3JhcGgiLCJzaW5rQ291bnQiLCJrZXkiLCJtb3ZlcyIsInZhbGlkUmFuZ2UiLCJjb29yZGluYXRlcyIsInVwIiwiZG93biIsImxlZnQiLCJyaWdodCIsIm9jY3VwaWVkIiwic2VsZWN0ZWQiLCJhcnJheSIsInJlY2VpdmVBdHRhY2siLCJjaGFuZ2VTZWxlY3RlZCIsInNoaXAiLCJoaXQiLCJjb25zb2xlIiwibG9nIiwic2V0U2hpcCIsIm9yaWVudGF0aW9uIiwib3JpZ2luIiwiY29vcmRpbmF0ZUFycmF5IiwidGVzdCIsInBsYXllcjEiLCJuYW1lIiwiaGl0cyIsInN1bmsiLCJpc1N1bmsiLCJzdW5rU2hpcCIsIm5vdFN1bmtTaGlwIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsImNyZWF0ZUJvYXJkIiwidHJhY2UiLCJwbGF5ZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJldmVudHMiLCJpbml0Il0sInNvdXJjZVJvb3QiOiIifQ==